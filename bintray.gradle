apply plugin: 'com.jfrog.bintray'
// Important! it is used by bintrayUpload
group = publishedGroupId
version = libraryVersion

task sourcesJar(type: Jar) {
    group = 'publishing'
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    failOnError = false
    group = 'publishing'
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    group = 'publishing'
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    //dryRun = true
    override = true
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = bintrayConfig != null ? [bintrayConfig] : ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayBaseName
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = false
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password")
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}

task readConfig {
    doLast {
        println("Begin Config Readout for bintrayUpload")
        configurations.getByName(bintrayConfig).allArtifacts.each {
            a -> println("$a.name : $a.file")
        }
        println("End Config Readout")
    }
}
bintrayUpload.finalizedBy { readConfig }