# Project-wide Gradle settings.

# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.

# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html

# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
# Default value: -Xmx10248m -XX:MaxPermSize=256m
org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8

# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. More details, visit
# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
#org.gradle.parallel=true
# After going thru the same experience to publish 'proper' artifacts
# for android library flavors, I perfectly share his sentiment.
# We now use GRADLE FURY for artifact generation for flavors.
# https://github.com/gradle-fury/gradle-fury
## BEGIN GRADLE FURY #1 (see root build.gradle for #2 and module build.gradle for #3)
# For multiflavor generation: gradle clean build publishToMavenLocal
# Android Configuration (used by gradle/android-support.gradle) ------------------------------------
pom.version=0.2.0
pom.groupId=com.baseconfig
pom.url=https://github.com/amirulzin/pillar
pom.inceptionYear=2015
pom.licenses.license.0.name=MIT License
pom.licenses.license.0.url=https://www.opensource.org/licenses/mit-license
pom.licenses.license.0.distribution=repo
# Pro tip: don't use special symbols that interfere with XML parsing in any of the pom settings
# like any of the following ' " < >
#pom.organization.name=[ gradle-fury ]
#pom.organization.url=https://gradle-fury.github.io/site/
pom.issueManagement.system=GitHub
pom.issueManagement.url=https://github.com/amirulzin/pillar/issues
#pom.ciManagement.system=Travis
#pom.ciManagement.url=https://travis-ci.org/gradle-fury/gradle-fury
pom.scm.url=https://github.com/amirulzin/pillar
pom.scm.connection=https://github.com/amirulzin/pillar.git
pom.scm.developerConnection=https://github.com/amirulzin/pillar.git
pom.distributionManagement.site.id=github
pom.distributionManagement.site.url=https://github.com/amirulzin/pillar/releases
# developer list
pom.developers.developer.0.id=amirulzin
pom.developers.developer.0.name=Amirul Zin
pom.developers.developer.0.email=amirul.mdzin@gmail.com
# new as of version 1.0.10 of gradle fury, javadoc generation with Graphviz and the UMLGraph doclet
# it's disabled by default, opt in setting. primarily because it adds a significant amount of time
# to the build when javadocs are enabled (gradlew instal -Pprofile=javadoc)
# it's also not available on MacOS since the build for graphviz crashes in some cases. On some projects
# it will fail to generate any javadocs at all, turn it off if you have problems
#fury.javadocs.umlgraph.enabled=false
# START quality plugin configuration
# if you do nothing here AND the quality plugin is 'apply'ed in your root build.gradle file
# all checks will be ran but the build should never fail due to a warning
# the following settings an be used to enable or disable/configure the individual plugins
# they are all optional
#    quality.checkStyle.enable=true
#    quality.checkStyle.ignoreFailures=true
#
#    quality.findbugs.enable=true
#    quality.findbugs.effort=max
#    quality.findbugs.reportLevel=high
#    quality.findbugs.ignoreFailures=true
#
#    quality.pmd.enable=true
#    quality.pmd.ignoreFailures=true
#
#    quality.jdepend.ignoreFailures=true
#
#    quality.lint.ignoreFailures=true
#
#    quality.owasp.enable=true
#    quality.owasp.ignoreWarnings=true
# END quality plugin configuration
## END GRADLE FURY #1